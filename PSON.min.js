/*
 PSON (c) 2013 Daniel Wirtz <dcode@dcode.io>
 Released under the Apache License, Version 2.0
 see: https://github.com/dcodeIO/PSON for details
*/
(function(f){function h(f){if(!f)throw Error("PSON requires ByteBuffer.js: Get it at https://github.com/dcodeIO/ByteBuffer.js");var d={T:{ZERO:0,MAX:239,NULL:240,TRUE:241,FALSE:242,EOBJECT:243,EARRAY:244,ESTRING:245,OBJECT:246,ARRAY:247,INTEGER:248,LONG:249,FLOAT:250,DOUBLE:251,STRING:252,STRING_ADD:253,STRING_GET:254,BINARY:255}};d.Encoder=function(k,c){var d=function(a,b){this.dict={};this.next=0;if(a&&Array.isArray(a))for(;this.next<a.length;)this.dict[a[this.next]]=this.next++;this.progressive=
!!b};d.prototype.encode=function(a,b){b||(b=new k);var c=b.littleEndian;try{return this._encodeValue(a,b.LE()),b.littleEndian=c,b}catch(d){throw b.littleEndian=c,d;}};d.prototype._encodeValue=function(a,b){if(null===a)b.writeUint8(c.NULL);else switch(typeof a){case "function":a=a.toString();case "string":0==a.length?b.writeUint8(c.ESTRING):this.dict.hasOwnProperty(a)?(b.writeUint8(c.STRING_GET),b.writeVarint32(this.dict[a])):(b.writeUint8(c.STRING),b.writeVString(a));break;case "number":var d=parseInt(a);
a===d?(d=k.zigZagEncode32(a),d<=c.MAX?b.writeUint8(d):(b.writeUint8(c.INTEGER),b.writeZigZagVarint32(a))):(b.writeUint8(c.DOUBLE),b.writeFloat64(a));break;case "boolean":b.writeUint8(a?c.TRUE:c.FALSE);break;case "object":if(Array.isArray(a))if(0==a.length)b.writeUint8(c.EARRAY);else{b.writeUint8(c.ARRAY);b.writeVarint32(a.length);for(d=0;d<a.length;d++)this._encodeValue(a[d],b)}else try{a=k.wrap(a),b.writeUint8(c.BINARY),b.writeVarint32(a.length),b.append(a)}catch(f){var e=Object.keys(a);if(0==e.length)b.writeUint8(c.EOBJECT);
else{b.writeUint8(c.OBJECT);b.writeVarint32(e.length);for(d=0;d<e.length;d++){var g=e[d];this.dict.hasOwnProperty(g)?(b.writeUint8(c.STRING_GET),b.writeVarint32(this.dict[g])):(this.progressive?(this.dict[g]=this.next++,b.writeUint8(c.STRING_ADD)):b.writeUint8(c.STRING),b.writeVString(g));this._encodeValue(a[g],b)}}}break;case "undefined":b.writeUint8(c.UNDEFINED)}};return d}(f,d.T);d.Decoder=function(d,c){var e=function(a,b){this.dict=a&&Array.isArray(a)?a:[];this.progressive=!!b};e.prototype.decode=
function(a){a instanceof d||(a=d.wrap(a));var b=a.littleEndian;try{var c=this._decodeValue(a.LE());a.littleEndian=b;return c}catch(e){throw a.littleEndian=b,e;}};e.prototype._decodeValue=function(a){var b=a.readUint8();if(b<=c.MAX)return d.zigZagDecode32(b);switch(b){case c.NULL:return null;case c.TRUE:return!0;case c.FALSE:return!1;case c.EOBJECT:return{};case c.EARRAY:return[];case c.ESTRING:return"";case c.OBJECT:for(var b=a.readVarint32(),e={};0<=--b;)e[this._decodeValue(a)]=this._decodeValue(a);
return e;case c.ARRAY:b=a.readVarint32();for(e=[];0<=--b;)e.push(this._decodeValue(a));return e;case c.INTEGER:return a.readZigZagVarint32();case c.LONG:return a.readZigZagVarint64();case c.FLOAT:return a.readFloat32();case c.DOUBLE:return a.readFloat64();case c.STRING:return a.readVString();case c.STRING_ADD:return a=a.readVString(),this.dict.push(a),a;case c.STRING_GET:return this.dict[a.readVarint32()];case c.BINARY:return b=a.readVarint32(),a.slice(a.offset,a.offset+b);default:throw Error("Illegal type at "+
a.offset+": "+b);}};return e}(f,d.T);d.Pair=function(){var d=function(){};d.prototype.encode=function(c){return this.encoder.encode(c)};d.prototype.toArrayBuffer=function(c){return this.encoder.encode(c).toArrayBuffer()};d.prototype.toBuffer=function(c){return this.encoder.encode(c).toBuffer()};d.prototype.decode=function(c){return this.decoder.decode(c)};return d}();d.StaticPair=function(d,c,e){var a=function(a){d.call(this);this.encoder=new c(a,!1);this.decoder=new e(a,!1)};a.prototype=Object.create(d.prototype);
return a}(d.Pair,d.Encoder,d.Decoder);d.ProgressivePair=function(d,c,e){var a=function(a){d.call(this);this.encoder=new c(a,!0);this.decoder=new e(a,!0)};a.prototype=Object.create(d.prototype);return a}(d.Pair,d.Encoder,d.Decoder);return d}"undefined"!=typeof module&&module.exports?module.exports=h(require("bytebuffer")):"undefined"!=typeof define&&define.amd?define("PSON",["ByteBuffer"],h):(f.dcodeIO||(f.dcodeIO={}),f.dcodeIO.PSON=h(f.dcodeIO.ByteBuffer))})(this);
