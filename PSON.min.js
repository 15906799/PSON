/*
 PSON (c) 2013 Daniel Wirtz <dcode@dcode.io>
 Released under the Apache License, Version 2.0
 see: https://github.com/dcodeIO/PSON for details
*/
(function(g){function h(d){if(!d)throw Error("PSON requires ProtoBuf.js: Get it at https://github.com/dcodeIO/ProtoBuf.js");var e=function(a){this.encoder=new e.Encoder(a);this.decoder=new e.Decoder(a)};d=d.newBuilder()["import"]({"package":"PSON",messages:[{name:"Message",fields:[{rule:"repeated",type:"Value",name:"dict",id:1,options:{packed:"true"}},{rule:"required",type:"Value",name:"data",id:2,options:{}}],enums:[],messages:[],options:{}},{name:"Value",fields:[{rule:"optional",type:"uint32",name:"ref",
id:1,options:{}},{rule:"optional",type:"bool",name:"udf",id:2,options:{}},{rule:"optional",type:"Object",name:"obj",id:3,options:{}},{rule:"optional",type:"Array",name:"arr",id:4,options:{}},{rule:"optional",type:"string",name:"str",id:5,options:{}},{rule:"optional",type:"int32",name:"itg",id:6,options:{}},{rule:"optional",type:"float",name:"flt",id:7,options:{}},{rule:"optional",type:"double",name:"dbl",id:8,options:{}},{rule:"optional",type:"bool",name:"bln",id:9,options:{}}],enums:[],messages:[],
options:{}},{name:"Object",fields:[{rule:"repeated",type:"uint32",name:"ref",id:1,options:{packed:"true"}},{rule:"repeated",type:"Value",name:"val",id:2,options:{packed:"true"}}],enums:[],messages:[],options:{}},{name:"Array",fields:[{rule:"repeated",type:"Value",name:"val",id:1,options:{packed:"true"}}],enums:[],messages:[],options:{}}],enums:[],imports:[],options:{}}).build("PSON");e.Message=d.Message;e.Value=d.Value;e.Array=d.Array;e.Object=d.Object;d=function(a){a=a&&Array.isArray(a)?a:[];this.dict=
{};for(this.next=0;this.next<a.length;)this.dict[a[this.next]]=this.next++;this.stack=[]};d.prototype.encode=function(a){a=this._encodeValue(a);for(var b=new e.Message;0<this.stack.length;)b.dict.push(new e.Value({str:this.stack.shift()}));b.data=a;return b.encode()};d.prototype._encodeValue=function(a){var b=new e.Value,c;if(null!==a)switch(typeof a){case "undefined":b.udf=!0;break;case "string":this.dict.hasOwnProperty(a)?b.ref=this.dict[a]:b.str=a;break;case "number":c=parseInt(a,10);a===c?b.itg=
c:b.dbl=a;break;case "object":if(Array.isArray(a)){b.arr=new e.Array;for(c=0;c<a.length;c++)b.arr.val.push(this._encodeValue(a[c]))}else{b.obj=new e.Object;var d=Object.keys(a);for(c=0;c<d.length;c++){var f=d[c];this.dict.hasOwnProperty(f)?b.obj.ref.push(this.dict[f]):(this.dict[f]=this.next,this.stack.push(f),b.obj.ref.push(this.next++));b.obj.val.push(this._encodeValue(a[f]))}}break;case "boolean":b.bln=a}return b};e.Encoder=d;d=function(a){this.dict=a&&Array.isArray(a)?a:[]};d.prototype.decode=
function(a){a=e.Message.decode(a);for(var b=0;b<a.dict.length;b++)this.dict.push(a.dict[b].str);return this._decodeValue(a.data)};d.prototype._decodeValue=function(a){if(null!==a.ref)return this.dict[a.ref];if(!0!==a.udf){if(null!==a.obj){for(var b={},c=0;c<a.obj.ref.length;c++)b[this.dict[a.obj.ref[c]]]=this._decodeValue(a.obj.val[c]);return b}if(null!==a.arr){b=[];for(c=0;c<a.arr.val.length;c++)b.push(this._decodeValue(a.arr.val[c]));return b}return null!==a.str?a.str:null!==a.itg?a.itg:null!==
a.flt?a.flt:null!==a.dbl?a.dbl:null!==a.bln?a.bln:null}};e.Decoder=d;e.prototype.encode=function(a){return this.encoder.encode(a)};e.prototype.decode=function(a){return this.decoder.decode(a)};return e}"undefined"!=typeof module&&module.exports?module.exports=h(require("protobufjs")):"undefined"!=typeof define&&define.amd?define("PSON",["ProtoBuf"],h):(g.dcodeIO||(g.dcodeIO={}),g.dcodeIO.PSON=h(g.dcodeIO.ProtoBuf))})(this);
